
@using CompleteMVC.ViewModel
@model UserEducationDetailsVM
@section TitleSection{
    Eduation and Carrer Section
}
@section HeaderSection{
    <style>
        .error {
            color: darkred;
        }
    </style>
    <script>

        $(document).ready(function () {
            var UserJobStatusVal = $('#UserJobStatus').val();

            if (UserJobStatusVal == 1) {
                $('#trJobcomapny').show();
                $('#trJobField').show();
                $('#trJobDesc').show();
                $('#trDesignation').show();
                $('#trCountry').show();
                $('#trIncome').show();
            }
            else {
                $('#trJobcomapny').hide();
                $('#trJobField').hide();
                $('#trJobDesc').hide();
                $('#trDesignation').hide();
                $('#trCountry').hide();
                $('#trIncome').hide();
            }

            var UserJobCountryVal = $('#UserJobCountry').val();
            if (UserJobCountryVal == "") {
                $('#trState').hide();
                $('#trCity').hide();
            }
            else {
                $('#trState').show();
            }

            var UserJobStateVal = $('#UserJobState').val();
            if (UserJobStateVal == "") {
                $('#trCity').hide();
            }
            else {
                $('#trCity').show();
            }

            var Id = $('#UserMaxQualificationClass').val();
            if (Id == "") {
                $("#trEducationField").hide();
                $("#trAddEdu").hide();
                $("#trListEdu").hide();
                $("#trSchool").hide();
                $("#trEditDeleteEdu").hide();
            }
            else {
                $("#trEducationField").show();
                $("#trAddEdu").show();
                $("#trListEdu").show();
                $("#trSchool").show();
                $("#trEditDeleteEdu").hide();
            }
        });

        function EnableEmployment() {
            var UserJobStatusVal = $('#UserJobStatus').val();

            if (UserJobStatusVal == 1) {
                $('#trJobcomapny').show();
                $('#trJobField').show();
                $('#trJobDesc').show();
                $('#trDesignation').show();
                $('#trCountry').show();
                $('#trIncome').show();
            }
            else {
                $('#trJobcomapny').hide();
                $('#trJobField').hide();
                $('#trJobDesc').hide();
                $('#trDesignation').hide();
                $('#trCountry').hide();
                $('#trIncome').hide();
            }
        }

        function GetStatesList() {

            var Id = $('#UserJobCountry').val();
            if (Id == "") {
                $("#trState").hide();
                $("#trCity").hide();
                var markupState = "<option value=''>Select State...</option>";
                var markupCity = "<option value=''>Select City...</option>";
                $("#UserJobState").html(markupState); // clear before appending new list
                $("#UserJobCity").html(markupCity); // clear before appending new list
            }
            else {
                $("#trState").show();
            }

            $.ajax({
                url: '/UserRegistration/GetStates',
                type: "POST",
                dataType: "JSON",
                contentType: "application/json; charset=utf-8",
                data: "{'Id':'" + Id + "'}",
                success: function (states) {
                    $("#UserJobState").html(""); // clear before appending new list

                    var markup = "<option value=''>Select State...</option>";
                    for (var x = 0; x < states.length; x++) {
                        markup += "<option value=" + states[x].Value + ">" + states[x].Text + "</option>";
                    }
                    $("#UserJobState").html(markup).show();
                }
            });
        }

        function GetCitiesList() {

            var StateId = $('#UserJobState').val();
            if (StateId == "") {
                $("#trCity").hide();
                var markup = "<option value=''>Select City...</option>";
                $("#UserJobCity").html(markup); // clear before appending new list
            }
            else {
                $("#trCity").show();
            }

            $.ajax({
                url: '/UserRegistration/GetCities',
                type: "POST",
                dataType: "JSON",
                contentType: "application/json; charset=utf-8",
                data: "{ 'Id':'" + StateId + "'}",
                success: function (cities) {
                    $("#UserJobCity").html(""); // clear before appending new list

                    var markup = "<option value=''>Select City...</option>";
                    for (var x = 0; x < cities.length; x++) {

                        markup += "<option value=" + cities[x].Value + ">" + cities[x].Text + "</option>";

                    }
                    $("#UserJobCity").html(markup).show();
                }
            });
        }


        function GetEducationField() {

            var Id = $('#UserMaxQualificationClass').val();
            if (Id == "") {
                $("#trEducationField").hide();
                $("#trAddEdu").hide();
                $("#trListEdu").hide();
                $("#trSchool").hide();
                $("#trEditDeleteEdu").hide();
                var markup = "<option value=''>Select Education Field...</option>";
                $("#UserEducationField").html(markup).show();
            }
            else {
                $("#trEducationField").show();
                $("#trAddEdu").show();
                $("#trListEdu").show();
                $("#trSchool").show();
            }
            $.ajax({
                url: '/UserRegistration/GetEducationFields',
                type: "POST",
                dataType: "JSON",
                contentType: "application/json; charset=utf-8",
                data: "{'Id':'" + Id + "'}",
                success: function (educationFields) {
                    $("#UserEducationField").html(""); // clear before appending new list

                    var markup = "<option value=''>Select Education Field...</option>";
                    for (var x = 0; x < educationFields.length; x++) {
                        markup += "<option value=" + educationFields[x].Value + ">" + educationFields[x].Text + "</option>";
                    }
                    $("#UserEducationField").html(markup).show();
                }
            });
        }

        function AddEducation() {
            debugger;
            $("#trEditDeleteEdu").hide();
            var QualificationClassText = $("#UserMaxQualificationClass :selected").text();
            var QualificationClassVal = $("#UserMaxQualificationClass").val();
            var EducationFieldText = $("#UserEducationField :selected").text();
            var EducationFieldVal = $("#UserEducationField").val();
            var SchoolNameVal = $("UserEducationSchool").val();
            var textToBind = QualificationClassText + "-" + EducationFieldText;
            $("#EducationDetails").append('<option value="' + QualificationClassVal + '">' + textToBind + '</option>');
        }

        $('#EducationDetails').click(function () {
            debugger;
            $("#trEditDeleteEdu").show();
            var listboxselected = $("#EducationDetails option:selected").val();
            alert(listboxselected);
        });

        function ShowEditDelete()
        {
            var listBox = document.getElementById("EducationDetails");
            if (listBox.options.length == 0) {
                $("#trEditDeleteEdu").hide();
            }
            else {
                $("#trEditDeleteEdu").show();
                //RemoveItemFromListBox();
            }
        }

        function RenoveButtonClick()
        {
            RemoveItemFromListBox();
            $("#trEditDeleteEdu").hide();
        }

        function RemoveItemFromListBox()
        {
            if (true) {

            }
            var listboxselected = $("#EducationDetails option:selected").val();
            var listBox = document.getElementById("EducationDetails");
            for (var i = listBox.options.length - 1; i >= 0; i--) {
                if (listBox.options[i].selected) {
                    listBox.removeChild(listBox.options[i]);
                }
            }
            alert(listboxselected);
        }
    </script>
}
@section ContentBody{
    @using (Html.BeginForm("UserEducationDetails", "UserRegistration", FormMethod.Post))
    {
        <div class="form-horizontal">
            <div class="form-group widthForm">
                @Html.LabelFor(m => m.UserMaxQualificationClass, "Maximum Qualification", new { @class = "control-label col-sm-2" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(m => m.UserMaxQualificationClass, new SelectList(Model.listQualificationClass, "Key", "Value"), "Select Qualification...", new { @onchange = "GetEducationField();", @class = "form-control" })
                </div>
            </div>
            <div class="form-group widthForm" id="trEducationField">
                @Html.LabelFor(m => m.UserEducationField, "Education Field", new { @class = "control-label col-sm-2" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(m => m.UserEducationField, new SelectList(ViewBag.EducationField, "Value", "Text"), "Select Education Field...", new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group widthForm" id="trSchool">
                @Html.LabelFor(m => m.UserEducationSchool, "Institute Name", new { @class = "control-label col-sm-2" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(m => m.UserEducationSchool, new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group" id="trAddEdu">
                <div class="col-sm-offset-2 col-sm-4 btn-group">
                    <input type="button" id="AddEdu" name="AddEdu" value="Add Education" class="btn btn-primary" onclick="AddEducation();"/>
                </div>
            </div>
            <div class="form-group widthForm" id="trListEdu">
                @Html.Label("List Of Education Details", new { @class = "control-label col-sm-2" })
                <div class="col-sm-4">
                    @Html.ListBox("EducationDetails", new List<SelectListItem>(), new { @onclick="ShowEditDelete();"})
                </div>
            </div>
            <div class="form-group" id="trEditDeleteEdu">
                @Html.Label("Remove Education", new { @class = "control-label col-sm-2" })
                <div class="col-sm-4">
                    @*<input type="button" id="EditEdu" name="EditEdu" value="Edit" class="btn btn-primary" />*@
                    <input type="button" id="RemoveEdu" name="RemoveEdu" value="Remove" class="btn btn-primary" onclick="RenoveButtonClick();"/>
                </div>
            </div>
            <div class="form-group widthForm">
                @Html.LabelFor(m => m.UserJobStatus, "Employement Status", new { @class = "control-label col-sm-2" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(m => m.UserJobStatus, new List<SelectListItem>()
                       {
                            new SelectListItem() { Text="Employed",Value= "1"},
                            new SelectListItem() { Text = "Not Employed", Value="2"},
                       }, "Select...", new { @class = "form-control", @onchange = "EnableEmployment();" })
                </div>
            </div>
            <div class="form-group widthForm" id="trJobcomapny">
                @Html.LabelFor(m => m.UserJobCompany, "Company Name", new { @class = "control-label col-sm-2" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(m => m.UserJobCompany, new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group widthForm" id="trJobField">
                @Html.LabelFor(m => m.UserJobField, "Job Field", new { @class = "control-label col-sm-2" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(m => m.UserJobField, new SelectList(Model.listJobField, "Key", "Value", 1), "Select...", new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group widthForm" id="trJobDesc">
                @Html.LabelFor(m => m.UserJobDesc, "About Job", new { @class = "control-label col-sm-2" })
                <div class="col-sm-4">
                    @Html.TextAreaFor(m => m.UserJobDesc, new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group widthForm" id="trDesignation">
                @Html.LabelFor(m => m.Designation, "Designation", new { @class = "control-label col-sm-2" })
                <div class="col-sm-4">
                    @Html.TextBoxFor(m => m.Designation, new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group widthForm" id="trCountry">
                @Html.LabelFor(m => m.UserJobCountry, "Job Country", new { @class = "control-label col-sm-2" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(m => m.UserJobCountry, new SelectList(Model.listCountry, "Key", "Value", 0), "Select...", new { @onchange = "GetStatesList();", @class = "form-control" })
                </div>
            </div>
            <div class="form-group widthForm" id="trState">
                @Html.LabelFor(m => m.UserJobState, "Job State", new { @class = "control-label col-sm-2" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(m => m.UserJobState, new SelectList(ViewBag.StateList, "Value", "Text"), "Select State...", new { @onchange = "GetCitiesList();", @class = "form-control" })
                </div>
            </div>
            <div class="form-group widthForm" id="trCity">
                @Html.LabelFor(m => m.UserJobCity, "Job City", new { @class = "control-label col-sm-2" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(m => m.UserJobCity, new SelectList(ViewBag.CityList, "Value", "Text"), "Select City...", new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group widthForm" id="trIncome">
                @Html.LabelFor(m => m.UserJobCity, "Income", new { @class = "control-label col-sm-2" })
                <div class="col-sm-4">
                    @Html.DropDownListFor(m => m.UserIncomeId, new SelectList(Model.listUserIncome, "Key", "Value"), "Select Income...", new { @class = "form-control" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-sm-offset-2 col-sm-4 btn-group">
                    <input type="submit" id="EducationDetails" name="EducationDetails" value="Save and Next" class="btn btn-primary" />
                    <input type="submit" id="Skip" name="Skip" value="Skip For Later" class="btn btn-primary" />
                </div>
            </div>
        </div>
        }
        }
